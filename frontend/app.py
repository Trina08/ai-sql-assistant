import streamlit as st
import requests
import pandas as pd
import plotly.express as px

# ‚úÖ Connect to your Render backend
BACKEND_URL = "https://ai-sql-assistant-muem.onrender.com"

# üé® Streamlit Page Config
st.set_page_config(
    page_title="AI SQL Business Assistant",
    page_icon="ü§ñ",
    layout="wide",
)

# üè∑Ô∏è Title
st.title("ü§ñ AI SQL Business Assistant")
st.markdown("### Manage your business with data-driven insights powered by Gemini AI")

# üß≠ Sidebar Navigation
st.sidebar.title("Navigation")
section = st.sidebar.radio("Go to:", ["üè† Dashboard", "üì¶ Products", "üßç Customers", "üßæ Orders", "üí¨ Ask AI"])


# ‚úÖ Helper to Fetch Data
def fetch_data(endpoint):
    try:
        res = requests.get(f"{BACKEND_URL}/{endpoint}")
        if res.status_code == 200:
            return res.json().get(endpoint, [])
        else:
            st.error(f"Error fetching {endpoint}: {res.text}")
            return []
    except Exception as e:
        st.error(f"Error connecting to backend: {e}")
        return []


# üè† Dashboard
if section == "üè† Dashboard":
    st.header("üìä Business Overview")

    # Load all three data tables
    products = fetch_data("products")
    customers = fetch_data("customers")
    orders = fetch_data("orders")

    if products and customers and orders:
        col1, col2, col3 = st.columns(3)
        col1.metric("Total Products", len(products))
        col2.metric("Total Customers", len(customers))
        col3.metric("Total Orders", len(orders))

        df_orders = pd.DataFrame(orders)
        if not df_orders.empty:
            fig = px.bar(df_orders, x="customer", y="total_amount", color="customer",
                         title="üí∞ Orders by Customer", text_auto=True)
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Loading data... or please ensure backend is active.")

# üì¶ Products Section
elif section == "üì¶ Products":
    st.header("üõçÔ∏è Products Overview")
    products = fetch_data("products")
    if products:
        df = pd.DataFrame(products)
        st.dataframe(df, use_container_width=True)
        fig = px.pie(df, names="category", title="üìà Product Categories Distribution")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("No products found.")

# üßç Customers Section
elif section == "üßç Customers":
    st.header("üë• Customers List")
    customers = fetch_data("customers")
    if customers:
        st.dataframe(pd.DataFrame(customers), use_container_width=True)
    else:
        st.warning("No customers found.")

# üßæ Orders Section
elif section == "üßæ Orders":
    st.header("üì¶ Orders Summary")
    orders = fetch_data("orders")
    if orders:
        df = pd.DataFrame(orders)
        st.dataframe(df, use_container_width=True)
        fig = px.line(df, x="order_date", y="total_amount", markers=True, title="üìä Order Trends Over Time")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("No orders data found.")

# üí¨ Ask AI Section
elif section == "üí¨ Ask AI":
    st.header("üí¨ Ask Business AI Assistant")
    st.markdown("Type your business question below. The AI will generate SQL, run it, and show real results üëá")

    user_question = st.text_input("üí≠ Enter your question:", placeholder="E.g. Show me top 5 most expensive products")
    if st.button("Ask AI"):
        if not user_question:
            st.warning("Please enter a question first.")
        else:
            with st.spinner("ü§ñ Thinking... contacting Gemini AI..."):
                try:
                    res = requests.post(f"{BACKEND_URL}/ask", json={"question": user_question})
                    if res.status_code == 200:
                        data = res.json()
                        st.success(f"‚úÖ Query generated: `{data.get('query', 'N/A')}`")

                        result = data.get("result", [])
                        if isinstance(result, list) and len(result) > 0:
                            st.dataframe(pd.DataFrame(result), use_container_width=True)
                        else:
                            st.info("No data found for this query.")
                    else:
                        st.error(f"Error: {res.text}")
                except Exception as e:
                    st.error(f"Connection error: {e}")

# ü¶∂ Footer
st.markdown("---")
st.caption("Built with ‚ù§Ô∏è using FastAPI, PostgreSQL, Streamlit, and Gemini AI.")
